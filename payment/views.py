import braintree
from django.shortcuts import render, redirect, get_object_or_404
from django.conf import settings
from orders.models import Order
from .tasks import payment_completed


# instantiate Braintree payment gateway
gateway = braintree.BraintreeGateway(settings.BRAINTREE_CONF)

# The payment_process view manages the checkout process
def payment_process(request):
    # You get the current order from the order_id session key, 
    # which was stored previously in the session by the order_create view.
    order_id = request.session.get('order_id')
    # You retrieve the Order object for the given ID or raise an Http404 exception if it is not found.
    order = get_object_or_404(Order, id=order_id)
    # You get sum of total cost of selected items
    total_cost = order.get_total_cost()

    if request.method == 'POST':
        # When the view is loaded with a POST request, you retrieve the 
        # "payment_ method_nonce" to generate a new transaction using "gateway.transaction.sale()"
        nonce = request.POST.get('payment_method_nonce', None)
        # create and submit transaction
        result = gateway.transaction.sale({
            # total amount formatted with two decimal places.
            'amount': f'{total_cost:.2f}',
            # payment_method_nonce: The token nonce generated by Braintree for the payment. 
            'payment_method_nonce': nonce,
            'options': {
                'submit_for_settlement': True
            }
        })
        if result.is_success:
            # mark the order as paid
            order.paid = True
            # store the unique transaction id
            order.braintree_id = result.transaction.id
            order.save()
            # launch asynchronous task
            payment_completed.delay(order.id)
            return redirect('payment:done')
        else:
            return redirect('payment:canceled')
    else:
        # generate token
        client_token = gateway.client_token.generate()
        return render(request,
                      'payment/process.html',
                      {'order': order,
                       'client_token': client_token})


def payment_done(request):
    return render(request, 'payment/done.html')


def payment_canceled(request):
    return render(request, 'payment/canceled.html')
